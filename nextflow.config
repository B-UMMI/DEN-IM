params {
    platformHTTP = null
    reportHTTP = null

    // Settings this option to true, will trigger the removal of temporary
    // data (usually fastq reads) at particular checkpoint processes that
    // modify that data. These checkpoint processes include 'trimmomatic',
    // 'spades' and 'skesa'.
    // WARNING: This will remove temporary fastq files that are not necessary
    // for the completion of the pipeline but, consequently, will disable
    // the resume functionality of the pipeline. However, it is often necessary
    // for very large pipelines and whenever disk space is critical.
    // More precisely, these checkpoint components will check whether the
    // putative temporary files are inside the nextflow work directory by
    // matching the regex: ".*/work/.{2}/.{30}/.*"
    // If it is a match, then the file is assumed to be a temporary one and
    // will be removed.
    clearAtCheckpoint = false
}

env {
    PYTHONPATH = "$baseDir/templates:\$PYTHONPATH"
    PATH = "$baseDir/templates:\$PATH"
}

process {
    cpus = 1
    memory = "1GB"

    errorStrategy = { task.attempt <= 7 ? "retry" : "ignore" }
    maxRetries = 7
    container = "flowcraft/flowcraft_base:1.0.0-1"
}

docker {
    // Added default docker option to avoid docker permission errors. See issue
    // #142
    runOptions = "-u \$(id -u):\$(id -g)"
}


executor {
  $local {
      cpus = 4
  }
}

singularity {
    cacheDir = "$HOME/.singularity_cache"
    autoMounts = true
}

trace {
    enabled = true
    file = "pipeline_stats.txt"
    fields = "task_id,\
              hash,\
              process,\
              tag,\
              status,\
              exit,\
              start,\
              container,\
              cpus,\
              time,\
              disk,\
              memory,\
              duration,\
              realtime,\
              queue,\
              %cpu,\
              %mem,\
              rss,\
              vmem,\
              rchar,\
              wchar"
}

//                             PROFILE OPTIONS                               //
///////////////////////////////////////////////////////////////////////////////

profiles {

    oneida {

        process.executor = "slurm"
        docker.enabled = true

        process{

            // MEMORY USAGE PER PROCESS //
            // general memory usage
            memory = "4GB"

        }

    }

    // INCD PROFILE
    incd {

        process.executor = "slurm"
        singularity.enabled = true

        singularity {
            cacheDir = "/mnt/singularity_cache"
            autoMounts = true
        }

        // Error and retry strategies
        process.errorStrategy = "retry"
        maxRetries = 3

        process.$chewbbaca.queue = "chewBBACA"

        process {

            // MEMORY USAGE PER PROCESS //
            // general memory usage
            memory = "4GB"

        }

    }

    // SLURM PROFILE
    slurm {

        // Change executor for SLURM
        process.executor = "slurm"
        // Change container engine for Shifter
        shifter.enabled = true

        process {

            clusterOptions = "--qos=oneida"

            errorStrategy = "retry"
            maxRetries = 5

            // MEMORY USAGE PER PROCESS //
            // general memory usage
            memory = "4GB"

        }

    }

    // SLURM PROFILE
    slurmOneida {

        // Change executor for SLURM
        process.executor = "slurm"
        // Change container engine for Shifter
        shifter.enabled = true

        process {

            clusterOptions = "--qos=oneida"

            // MEMORY USAGE PER PROCESS //
            // general memory usage
            memory = "4GB"

            // Set QOS for chewbbaca in order to run a single job
            $chewbbaca.clusterOptions = "--qos=chewbbaca"
        }
    }
}

includeConfig "profiles.config"
includeConfig "resources.config"
includeConfig "containers.config"
includeConfig "params.config"
includeConfig "user.config"
